module soc_calc
  use socrates_config_mod
  use def_spectrum, only: StrSpecDim
  use def_mcica,    only: StrMcica
  use def_control,  only: StrCtrl,  deallocate_control
  use def_dimen,    only: StrDim
  use def_atm,      only: StrAtm,   deallocate_atm
  use def_bound,    only: StrBound, deallocate_bound
  use def_cld,      only: StrCld,   deallocate_cld, deallocate_cld_prsc, &
                                  deallocate_cld_mcica
  use def_aer,      only: StrAer,   deallocate_aer, deallocate_aer_prsc
  use def_out,      only: StrOut,   deallocate_out

  use socrates_set_spectrum, only: spectrum_array_name, spectrum_array, &
       mcica_spectrum_name, mcica_data_array

  use socrates_set_control,   only: set_control
  use socrates_set_dimen,     only: set_dimen
  use socrates_set_atm,       only: set_atm
  use socrates_set_bound,     only: set_bound
  use socrates_set_cld,       only: set_cld
  use socrates_set_cld_dim,   only: set_cld_dim
  use socrates_set_cld_mcica, only: set_cld_mcica
  use socrates_set_aer,       only: set_aer
  use socrates_set_diag,      only: set_diag
  use gas_list_pcf
  use realtype_rd, only: RealExt
  use ereport_mod, only: ereport
  use errormessagelength_mod, only: errormessagelength
  use rad_pcf, only: i_normal, i_err_fatal
  use params, only : nf, ne
  use atmosphere, only : nqr

  use soc_init, only : control, spectrum, dimen, diag, spec, mcica
  implicit none

contains

  subroutine calc_soc(pf, pe, Tf, Te, q, fup, fdn, sup, sdn, soc_indices)
    real, dimension(:), intent(in)   :: pf, pe, Tf, Te
    integer, dimension(:), intent(in) :: soc_indices
    real, dimension(:,:), intent(in) :: q
    real, dimension(:), intent(out)  :: fup, fdn, sup, sdn, net_F
    

    ! Mcica data
    type (StrMcica), target :: mcica_data

    
    !integer :: n_profile
    !   Number of columns to operate on
    !integer :: n_layer
    !   Number of layers for radiation
    !integer :: n_layer_stride
    !   Number of layers in input 1d arrays
    !integer :: n_level_stride
    !   Number of levels in input 1d arrays
    !integer :: n_tile
    !   Number of surface tiles
    !integer :: n_cloud_layer
    !   Number of potentially cloudy layers
    !integer :: n_aer_mode
    !   Number of aerosol modes
    !integer :: n_aer_layer
    !   Number of aerosol layers in 1d arrays

    real(RealExt) :: p_layer_1d(nf)
    !   Pressure at layer centres
    real(RealExt) :: t_layer_1d(nf)
    !   Temperature at layer centres
    real(RealExt) :: t_level_1d(0:nf)
    !   Temperature at layer boundaries
    real(RealExt) :: mass_1d(nf)
    !   Mass of layer (kg m-2)
    real(RealExt) :: density_1d(nf)
    !   Density of layer (kg m-3)
    real(RealExt),dimension(nf) :: h2o_1d, co_1d, co2_1d, ch4_1d, nh3_1d, hcn_1d, c2h6_1d, n2_1d, &
         h2_1d, he_1d
    !   Mass mixing ratio of water vapour
    real(RealExt) :: o3_1d(nf)
    !   Mass mixing ratio of ozone

    
    real(RealExt) :: t_ground(1)
    !   Effective radiative temperature over whole grid-box
     real(RealExt) :: flux_ground_1d(spec%dim%nd_band)
    !   1d Effective surface emission over whole grid-box (n_band)
    real(RealExt) :: cos_zenith_angle(1)
    !   Cosine of solar zenith angle
    real(RealExt) :: solar_irrad(1)
    !   Solar irradiance at top-of-atmosphere (mean over timestep)

    logical :: l_orog
    !   Apply orographic correction
    real(RealExt) :: orog_corr(1)
    !   Orographic correction factor

    logical :: l_grey_albedo
    !   Set a single grey albedo / emissivity for the surface
    real(RealExt) :: grey_albedo
    !   Grey surface albedo

     real(RealExt) :: albedo_diff_1d(1)
    !   1d spectral diffuse albedo (n_band)
    real(RealExt) :: albedo_dir_1d(1)
    !   1d spectral direct albedo (n_band)

    logical :: l_tile
    !   Use tiled surface properties
    logical :: l_flux_tile(1)
    !   Set effective surface emission for selected tiles
    real(RealExt) :: frac_tile(1,1)
    !   Tile fractions (n_profile, n_tile)
    real(RealExt) :: t_tile(1,1)
    !   Tile temperatures (n_profile, n_tile)
    real(RealExt) :: flux_tile(1,1,spec%dim%nd_band)
    !   Tile emissions (n_profile, n_tile, n_band)
    real(RealExt) :: albedo_diff_tile(1, 1, spec%dim%nd_band)
    !   Diffuse tile albedo (n_profile, n_tile, n_band)
    real(RealExt) :: albedo_dir_tile(1,1, spec%dim%nd_band)
    !   Direct tile albedo (n_profile, n_tile, n_band)
    real(RealExt) :: frac_tile_1d(1)
    !   1d tile fractions (n_tile)
    real(RealExt) :: t_tile_1d(1)
    !   1d tile temperatures (n_tile)
    real(RealExt) :: flux_tile_1d(1)
    !   Tile emissions (n_tile*n_band)
    real(RealExt) :: albedo_diff_tile_1d(1)
    !   1d diffuse tile albedo (n_tile*n_band)
    real(RealExt) :: albedo_dir_tile_1d(1)
    !   1d direct tile albedo (n_tile*n_band)

    real(RealExt), dimension (1, nf) :: &
         cloud_frac, conv_frac, &
         liq_frac, ice_frac, liq_conv_frac, ice_conv_frac, &
         liq_mmr, ice_mmr, liq_conv_mmr, ice_conv_mmr, &
         liq_dim, ice_dim, liq_conv_dim, ice_conv_dim, &
         liq_rsd, ice_rsd, liq_conv_rsd, ice_conv_rsd, &
         liq_nc, ice_nc, liq_conv_nc, ice_conv_nc
    real(RealExt), dimension (nf) :: &
         cloud_frac_1d, conv_frac_1d, &
         liq_frac_1d, ice_frac_1d, liq_conv_frac_1d, ice_conv_frac_1d, &
         liq_mmr_1d, ice_mmr_1d, liq_conv_mmr_1d, ice_conv_mmr_1d, &
         liq_dim_1d, ice_dim_1d, liq_conv_dim_1d, ice_conv_dim_1d, &
         liq_rsd_1d, ice_rsd_1d, liq_conv_rsd_1d, ice_conv_rsd_1d, &
         liq_nc_1d, ice_nc_1d, liq_conv_nc_1d, ice_conv_nc_1d
    !   Liquid and ice cloud fractions, gridbox mean mixing ratios,
    !   effective dimensions, relative standard deviation of condensate,
    !   and number concentration

    real(RealExt) :: cloud_vertical_decorr
    !   Decorrelation pressure scale for cloud vertical overlap
    real(RealExt) :: conv_vertical_decorr
    !   Decorrelation pressure scale for convective cloud vertical overlap
    real(RealExt) :: cloud_horizontal_rsd
    !   Relative standard deviation of sub-grid cloud condensate

    real(RealExt) :: layer_heat_capacity_1d(:)
    !   Heat capacity of layer

    !   Select source of radiation
    integer :: &
         i_cloud_representation, i_overlap, i_inhom, &
         i_mcica_sampling, i_st_water, i_st_ice, i_cnv_water, i_cnv_ice, i_drop_re
    !   Select treatment of cloud
    integer :: rand_seed(1)
    !   Random seed for cloud generator

    real(RealExt) :: aer_mix_ratio_1d(dimen%nd_layer*aer%n_mode)
    !   1d MODE aerosol mass-mixing ratio (n_aer_layer*n_mode)

    real(RealExt), dimension(dimen%n_profile, nf, aer%n_mode, spec%dim%nd_band) :: &
         aer_absorption, aer_scattering, aer_asymmetry
    !   MODE aerosol optical properties (n_profile, n_layer, n_mode, n_band)

    real(RealExt), dimension(nf*aer%n_mode*spec%dim%nd_band) :: &
         aer_absorption_1d, aer_scattering_1d, aer_asymmetry_1d
    !   1d MODE aerosol optical properties (n_aer_layer*n_mode*n_band)

    real(RealExt) :: mean_rel_humidity_1d(nf)
    !   Mean relative humidity applicable for CLASSIC aerosols (clear-sky)

    logical :: &
         l_water_soluble, l_dust_like, l_oceanic, l_soot, l_ash, l_sulphuric, &
         l_ammonium_sulphate, l_saharan_dust, &
         l_accum_sulphate, l_aitken_sulphate, &
         l_fresh_soot, l_aged_soot, &
         l_sodium_chloride, l_seasalt_film, l_seasalt_jet, &
         l_dust_div1, l_dust_div2, l_dust_div3, &
         l_dust_div4, l_dust_div5, l_dust_div6, &
         l_biomass_1, l_biomass_2, &
         l_biogenic, &
         l_ocff_fresh, l_ocff_aged, &
         l_delta, l_murk, &
         l_nitrate, &
         l_twobindust_1, l_twobindust_2
    ! Flags to include CLASSIC aerosols

    real(RealExt), dimension(nf) :: &
         water_soluble_1d, dust_like_1d, oceanic_1d, soot_1d, ash_1d, sulphuric_1d, &
         ammonium_sulphate_1d, saharan_dust_1d, &
         accum_sulphate_1d, aitken_sulphate_1d, &
         fresh_soot_1d, aged_soot_1d, &
         sodium_chloride_1d, seasalt_film_1d, seasalt_jet_1d, &
         dust_div1_1d, dust_div2_1d, dust_div3_1d, &
         dust_div4_1d, dust_div5_1d, dust_div6_1d, &
         biomass_1_1d, biomass_2_1d, &
         biogenic_1d, &
         ocff_fresh_1d, ocff_aged_1d, &
         delta_1d, murk_1d, &
         nitrate_1d, &
         twobindust_1_1d, twobindust_2_1d
    ! 1d CLASSIC aerosol mass mixing ratios



    

    ! Atmospheric properties:
    type(StrAtm) :: atm

    ! Boundary conditions:
    type(StrBound) :: bound

    ! Cloud properties:
    type(StrCld) :: cld

    ! Aerosol properties:
    type(StrAer) :: aer

    ! Output fields from core radiation code:
    type(StrOut) :: radout

    integer :: id_spec, id_mcica
    !   Loop variables

    integer :: ierr = i_normal
    character (len=errormessagelength) :: cmessage
    character (len=*), parameter :: RoutineName = 'RUNES'

    integer :: nspec, nfull, nedge
    integer :: k, n

    ! Set all abundance array inputs to zero
    h2o_1d = 0.; co2_1d = 0.; co_1d = 0.; ch4_1d = 0., n2_1d = 0.; nh3_1d = 0.; h2_1d = 0.
    he_1d = 0.; c2h6_1d = 0.; hcn_1d = 0.; n2o_1d = 0.; so2_1d = 0.; o2_1d = 0.; o3_1d = 0.;
    cfc11_1d = 0.; cfc12_1d = 0.; cfc113_1d = 0.; hcfc22_1d = 0.; hfc134a_1d = 0.;
    
    do n = 1,nqr
       select case(soc_indices(n))
       !H2O
       case(IP_h2o)
          h2o_1d = q(:,n)
       case(IP_h2)
          h2_1d = q(:,n)
       case(IP_he)
          he_1d = q(:,n)
       case(IP_hcn)
          hcn_1d = q(:,n)
       case(IP_co)
          co_1d = q(:,n)
       case(IP_co2)
          co2_1d=q(:,n)
       case(IP_nh3)
          nh3_1d = q(:,n)
       case(IP_c2h6)
          c2h6_1d = q(:,n)
       case(IP_n2)
          n2_1d = q(:,n)
       case(IP_ch4)
          ch4_1d = q(:,n)
       end select
    enddo

    ! Ensure other profiles required have been set for input
    ! Right now, doesn't include specification for clouds/aerosols
    do k=1,nf
       mass_1d(k) = delp(k)/gravity
       density_1d(k) = p_layer_1d(k) * mmw(k)/r_gas/t_layer_1d(k)
    enddo
    
  call set_atm(atm, dimen, spec, 1, nf, &
  n_layer_stride    = nf, &
  n_level_stride    = ne, &
  p_layer_1d        = p_layer_1d, &
  t_layer_1d        = t_layer_1d, &
  mass_1d           = mass_1d, &
  density_1d        = density_1d, &
  t_level_1d        = t_level_1d, &
  h2o_1d            = h2o_1d, &
  o3_1d             = o3_1d, &
  co2_1d            = co2_1d,&
  n2o_1d            = n2o_1d,&
  ch4_1d            = ch4_1d, &
  o2_1d             = o2_1d, &
  so2_1d            = so2_1d, &
  cfc11_1d          = cfc11_1d, &
  cfc12_1d          = cfc12_1d, & 
  cfc113_1d          = cfc113_1d, &
  hcfc22_1d          = hcfc22_1d, &
  hfc134a_1d         = hfc134a_1d, &
  hcn_1d            = hcn_1d, &
  c2h6_1d           = c2h6_1d, &
  h2_1d             = h2_1d, &
  he_1d             = he_1d,&
  co_1d             = co_1d,
  nh3_1d            = nh3_1d,&
  l_invert          = l_invert, &
  l_profile_last    = l_profile_last, &
  l_debug           = l_debug, &
  i_profile_debug   = i_profile_debug )

  call set_bound(bound, control, dimen, spec, n_profile, &
  n_tile              = n_tile, &
  t_ground            = t_ground, &
  flux_ground_1d      = flux_ground_1d, &
  cos_zenith_angle    = cos_zenith_angle, &
  solar_irrad         = solar_irrad, &
  orog_corr           = orog_corr, &
  l_grey_albedo       = l_grey_albedo, &
  grey_albedo         = grey_albedo, &
  flux_tile           = flux_tile, &
  albedo_diff_tile    = albedo_diff_tile, &
  albedo_dir_tile     = albedo_dir_tile, &
  frac_tile_1d        = frac_tile_1d, &
  t_tile_1d           = t_tile_1d, &
  flux_tile_1d        = flux_tile_1d, &
  albedo_diff_tile_1d = albedo_diff_tile_1d, &
  albedo_dir_tile_1d  = albedo_dir_tile_1d, &
  l_profile_last      = l_profile_last, &
  l_debug             = l_debug, &
  i_profile_debug     = i_profile_debug )

  call set_cld(cld, control, dimen, spec, atm, &
  n_layer_stride        = nf, &
  cloud_frac_1d         = cloud_frac_1d, &
  conv_frac_1d          = conv_frac_1d, &
  liq_frac_1d           = liq_frac_1d, &
  ice_frac_1d           = ice_frac_1d, &
  liq_conv_frac_1d      = liq_conv_frac_1d, &
  ice_conv_frac_1d      = ice_conv_frac_1d, &
  liq_mmr_1d            = liq_mmr_1d, &
  ice_mmr_1d            = ice_mmr_1d, &
  liq_conv_mmr_1d       = liq_conv_mmr_1d, &
  ice_conv_mmr_1d       = ice_conv_mmr_1d, &
  liq_rsd_1d            = liq_rsd_1d, &
  ice_rsd_1d            = ice_rsd_1d, &
  liq_conv_rsd_1d       = liq_conv_rsd_1d, &
  ice_conv_rsd_1d       = ice_conv_rsd_1d, &
  cloud_vertical_decorr = cloud_vertical_decorr, &
  conv_vertical_decorr  = conv_vertical_decorr, &
  cloud_horizontal_rsd  = cloud_horizontal_rsd, &
  l_invert              = l_invert, &
  l_profile_last        = l_profile_last, &
  l_debug               = l_debug, &
  i_profile_debug       = i_profile_debug )

  call set_cld_dim(cld, control, dimen, spec, atm, &
  n_layer_stride  = nf, &
  liq_nc_1d       = liq_nc_1d, &
  ice_nc_1d       = ice_nc_1d, &
  liq_conv_nc_1d  = liq_conv_nc_1d, &
  ice_conv_nc_1d  = ice_conv_nc_1d, &
  liq_dim_1d      = liq_dim_1d, &
  ice_dim_1d      = ice_dim_1d, &
  liq_conv_dim_1d = liq_conv_dim_1d, &
  ice_conv_dim_1d = ice_conv_dim_1d, &
  l_invert        = l_invert, &
  l_profile_last  = l_profile_last, &
  l_debug         = l_debug, &
  i_profile_debug = i_profile_debug )

  call set_cld_mcica(cld, mcica, control, dimen, spec, atm, &
  rand_seed    = rand_seed )

  call set_aer(aer, control, dimen, spec, &
  n_profile, nf, dimen%nd_aerosol_mode, nf, n_aer_layer, &
  aer_mix_ratio, aer_absorption, aer_scattering, aer_asymmetry, &
  aer_mix_ratio_1d, aer_absorption_1d, aer_scattering_1d, aer_asymmetry_1d, &
  mean_rel_humidity, mean_rel_humidity_1d, &
  l_water_soluble, water_soluble, water_soluble_1d, &
  l_dust_like, dust_like, dust_like_1d, &
  l_oceanic, oceanic, oceanic_1d, &
  l_soot, soot, soot_1d, &
  l_ash, ash, ash_1d, &
  l_sulphuric, sulphuric, sulphuric_1d, &
  l_ammonium_sulphate, ammonium_sulphate, ammonium_sulphate_1d, &
  l_saharan_dust, saharan_dust, saharan_dust_1d, &
  l_accum_sulphate, accum_sulphate, accum_sulphate_1d, &
  l_aitken_sulphate, aitken_sulphate, aitken_sulphate_1d, &
  l_fresh_soot, fresh_soot, fresh_soot_1d, &
  l_aged_soot, aged_soot, aged_soot_1d, &
  l_sodium_chloride, sodium_chloride, sodium_chloride_1d, &
  l_seasalt_film, seasalt_film, seasalt_film_1d, &
  l_seasalt_jet, seasalt_jet, seasalt_jet_1d, &
  l_dust_div1,  dust_div1_1d, &
  l_dust_div2,  dust_div2_1d, &
  l_dust_div3, dust_div3_1d, &
  l_dust_div4,  dust_div4_1d, &
  l_dust_div5,  dust_div5_1d, &
  l_dust_div6,  dust_div6_1d, &
  l_biomass_1,  biomass_1_1d, &
  l_biomass_2,  biomass_2_1d, &
  l_biogenic,  biogenic_1d, &
  l_ocff_fresh, ocff_fresh_1d, &
  l_ocff_aged,  ocff_aged_1d, &
  l_delta,  delta_1d, &
  l_murk, murk_1d, &
  l_nitrate, nitrate_1d, &
  l_twobindust_1,  twobindust_1_1d, &
  l_twobindust_2,  twobindust_2_1d, &
  l_invert, l_profile_last)

  ! DEPENDS ON: radiance_calc
  ! SW first
  control%isolir = ip_solar
  call radiance_calc(control, dimen, spec, atm, cld, aer, bound, radout)
  sdn(1:ne) = sum(radout%flux_down(1, 0:dimen%nd_layer, :), dim=2) 
  sup(1:ne) = sum(radout%flux_up(1,   0:dimen%nd_layer, :), dim=2)

  ! Now LW
  control%isolir = ip_infra_red
  call radiance_calc(control, dimen, spec, atm, cld, aer, bound, radout)
  fdn(1:ne) = sum(radout%flux_down(1, 0:dimen%nd_layer, :), dim=2) 
  fup(1:ne) = sum(radout%flux_up(1,   0:dimen%nd_layer, :), dim=2)

  net_F = fup + sup - sdn - fdn
  
  ! call set_diag(diag, &
  ! control, dimen, spec, atm, cld, mcica, aer, bound, radout, &
  ! n_profile, n_layer, &
  ! n_layer_stride         = n_layer_stride, &
  ! n_tile                 = n_tile, &
  ! layer_heat_capacity    = layer_heat_capacity, &
  ! layer_heat_capacity_1d = layer_heat_capacity_1d, &
  ! l_invert               = l_invert, &
  ! l_profile_last         = l_profile_last)

end module soc_calc
